<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE section PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
                         "http://www.docbook.org/xml/4.5/docbookx.dtd" [
                         <!ENTITY % xinclude SYSTEM "../../../docbook/xinclude.mod" >
                         %xinclude;
                         <!ENTITY % local.common.attrib "xml:base CDATA #IMPLIED" >
]>

<section id="linking_member">
  <title><code>member</code></title>
  <para>Represents the fact that an object, such as an entry or a sense, is a member of a
    relation.</para>

  <itemizedlist>
    <title>Property of</title>
    <listitem>
      <para><literal><olink targetptr="linking_relation">relation</olink></literal></para>
    </listitem>
  </itemizedlist>

  <itemizedlist>
    <title>Properties</title>
    <listitem>
      <para><literal>ref</literal>
        <glossterm>required</glossterm> (exactly one) and <glossterm>unique</glossterm> (in
        combination with other unique properties if present). Reference to an object, such as an
        entry or a sense. The IRI addressing mechanism described in <xref linkend="frag_iri"/>
        can be used (but is not <glossterm>required</glossterm>).</para>
    </listitem>
    <listitem>
      <para><literal>role</literal>
        <glossterm>optional</glossterm> (zero or one) and <glossterm>unique</glossterm> (in
        combination with other unique properties if present). Normalised string. An indication of
        the role the member has in this relation: whether it is the hypernym or the hyponym (in a
        hyperonymy/hyponymy relation), or whether it is one of the synonyms (in a synonymy
        relation), and so on. You can use <code><olink targetptr="linking_memberType"
            >memberType</olink></code> objects to explain those roles and to constrain which
        relations are allowed to contain which roles, what their object types are allowed to be (eg.
        entries or senses) and how many members with this role each relation is allowed to
        have.</para>
    </listitem>
    <listitem>
      <para><literal>listingOrder</literal>
        <glossterm>required</glossterm> (exactly one). Number. The position of this member among other members of the same
        relation. When showing members of the relation to human users (for example: when listing the synonyms in a synonymy relation),
        the members should be listed in this order. This can be implicit from the serialization.</para>
    </listitem>
    <listitem>
      <para><literal>obverseListingOrder</literal>
        <glossterm>optional</glossterm> (at most one). Number. The position of this relation among
        other relations this member is involved in. When an object - such as an entry or a sense -
        is a member of several relations (for example: when a sense is a member of a synonymy
        relation and also of an antonymy relation) then, when showing the object (the entry or the
        sense) to human users, the relations should be listed in this order (for example: the
		synonyms first, the antonyms second). This can be implicit from the serialization of the <code><olink targetptr="linking_memberType">relation</olink></code> objects.</para>
    </listitem>
  </itemizedlist>

  <example>
    <title>XML</title>
    <programlisting>
&lt;member ref="..." role="..." obverseListingOrder="..."/&gt;
</programlisting>
  </example>

  <example>
    <title>JSON</title>
    <programlisting>
{
    "ref": "...",
    "role": "...",
    "obverseListingOrder": "..."
}
</programlisting>
  </example>
  <example>
      <title>RDF</title>
      <programlisting>
&lt;#relation&gt; dmlex:member [
  a dmlex:Member ;
  dmlex:ref "..." ;
  dmlex:role "..." ;
  dmlex:listingOrder 0 ;
  dmlex:obverseListingOrder 0 ] .
      </programlisting>
  </example>
  <example>
    <title>Relational database</title>
    <graphic fileref="modules/linking/databaseDiagrams/member.svg" contentwidth="16cm"/>
  </example>

</section>
